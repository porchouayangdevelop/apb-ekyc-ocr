
<template>
  <v-dialog
    :model-value="modelValue"
    @update:model-value="updateDialog"
    max-width="800px"
    persistent
    scrollable
  >
    <v-card>
      <v-card-title class="text-h5 d-flex align-center">
        <v-icon class="mr-2" color="primary">mdi-shield-account</v-icon>
        OCR Authentication & Processing
      </v-card-title>

      <v-card-subtitle class="pb-2">
        Step-by-step authentication and document processing
      </v-card-subtitle>

      <v-card-text>
        <!-- Stepper Component -->
        <v-stepper
          v-model="currentStep"
          :items="stepperItems"
          show-actions
          flat
        >
          <!-- Step 1: Encode Password -->
          <template v-slot:item.1>
            <v-card flat>
              <v-card-title class="text-h6">
                <v-icon class="mr-2">mdi-key-variant</v-icon>
                Step 1: Encode Password
              </v-card-title>
              <v-card-text>
                <v-alert type="info" variant="tonal" class="mb-4">
                  First, we need to encode your password for secure authentication.
                </v-alert>

                <div class="d-flex align-center">
                  <v-btn
                    color="primary"
                    @click="handleEncodePassword"
                    :loading="step1Loading"
                    :disabled="step1Completed"
                  >
                    {{ step1Completed ? 'Password Encoded' : 'Encode Password' }}
                  </v-btn>

                  <v-icon
                    v-if="step1Completed"
                    color="success"
                    class="ml-2"
                  >
                    mdi-check-circle
                  </v-icon>
                </div>

                <v-alert
                  v-if="step1Error"
                  type="error"
                  variant="tonal"
                  class="mt-4"
                >
                  {{ step1Error }}
                </v-alert>

                <v-card
                  v-if="encodedData"
                  variant="outlined"
                  class="mt-4"
                >
                  <v-card-text>
                    <div class="text-subtitle-2 mb-2">Encoded Password:</div>
                    <div class="text-body-2 font-monospace text-truncate">
                      {{ encodedData.password }}
                    </div>
                    <div class="text-subtitle-2 mb-2 mt-3">Public Key:</div>
                    <div class="text-body-2 font-monospace text-truncate">
                      {{ encodedData.publicKey }}
                    </div>
                  </v-card-text>
                </v-card>
              </v-card-text>
            </v-card>
          </template>

          <!-- Step 2: Login -->
          <template v-slot:item.2>
            <v-card flat>
              <v-card-title class="text-h6">
                <v-icon class="mr-2">mdi-login</v-icon>
                Step 2: Login
              </v-card-title>
              <v-card-text>
                <v-alert type="info" variant="tonal" class="mb-4">
                  Enter your credentials to authenticate with the server.
                </v-alert>

                <v-form ref="loginFormRef" v-model="isLoginFormValid">
                  <v-text-field
                    v-model="loginForm.username"
                    label="Username"
                    prepend-inner-icon="mdi-account"
                    variant="outlined"
                    :rules="usernameRules"
                    :disabled="step2Loading || step2Completed"
                    class="mb-3"
                  ></v-text-field>

                  <v-text-field
                    v-model="loginForm.password"
                    label="Original Password"
                    prepend-inner-icon="mdi-lock"
                    :type="showPassword ? 'text' : 'password'"
                    :append-inner-icon="showPassword ? 'mdi-eye' : 'mdi-eye-off'"
                    @click:append-inner="showPassword = !showPassword"
                    variant="outlined"
                    :rules="passwordRules"
                    :disabled="step2Loading || step2Completed"
                    class="mb-3"
                    hint="Enter your original password (will be encoded automatically)"
                  ></v-text-field>

                  <v-text-field
                    v-model="loginForm.clientUid"
                    label="Client ID (Optional)"
                    prepend-inner-icon="mdi-identifier"
                    variant="outlined"
                    :disabled="step2Loading || step2Completed"
                    class="mb-3"
                  ></v-text-field>

                  <v-text-field
                    v-model="loginForm.messagecode"
                    label="Message Code (Optional)"
                    prepend-inner-icon="mdi-message"
                    variant="outlined"
                    :disabled="step2Loading || step2Completed"
                  ></v-text-field>
                </v-form>

                <div class="d-flex align-center mt-4">
                  <v-btn
                    color="primary"
                    @click="handleLogin"
                    :loading="step2Loading"
                    :disabled="!isLoginFormValid || !step1Completed || step2Completed"
                  >
                    {{ step2Completed ? 'Logged In' : 'Login' }}
                  </v-btn>

                  <v-icon
                    v-if="step2Completed"
                    color="success"
                    class="ml-2"
                  >
                    mdi-check-circle
                  </v-icon>
                </div>

                <v-alert
                  v-if="step2Error"
                  type="error"
                  variant="tonal"
                  class="mt-4"
                >
                  {{ step2Error }}
                </v-alert>

                <v-card
                  v-if="authTokens"
                  variant="outlined"
                  class="mt-4"
                >
                  <v-card-text>
                    <div class="text-subtitle-2 mb-2">Authentication Status:</div>
                    <v-chip color="success" size="small">
                      <v-icon start>mdi-check</v-icon>
                      Authenticated
                    </v-chip>
                    <div class="text-body-2 mt-2">
                      Access Token: {{ authTokens.accessToken.substring(0, 20) }}...
                    </div>
                  </v-card-text>
                </v-card>
              </v-card-text>
            </v-card>
          </template>

          <!-- Step 3: OCR Processing -->
          <template v-slot:item.3>
            <v-card flat>
              <v-card-title class="text-h6">
                <v-icon class="mr-2">mdi-eye-scan</v-icon>
                Step 3: OCR Document Processing
              </v-card-title>
              <v-card-text>
                <v-alert type="info" variant="tonal" class="mb-4">
                  Process your document image with OCR to extract structured data.
                </v-alert>

                <div class="mb-4">
                  <v-select
                    v-model="selectedOcrType"
                    :items="ocrTypes"
                    item-title="title"
                    item-value="value"
                    label="Document Type"
                    variant="outlined"
                    :disabled="step3Loading || !step2Completed"
                  ></v-select>
                </div>

                <div class="d-flex align-center mb-4">
                  <v-btn
                    color="primary"
                    @click="handleOcrProcess"
                    :loading="step3Loading"
                    :disabled="!step2Completed || !selectedOcrType || !imageBase64"
                  >
                    Process Document
                  </v-btn>

                  <v-icon
                    v-if="step3Completed"
                    color="success"
                    class="ml-2"
                  >
                    mdi-check-circle
                  </v-icon>
                </div>

                <v-alert
                  v-if="step3Error"
                  type="error"
                  variant="tonal"
                  class="mb-4"
                >
                  {{ step3Error }}
                </v-alert>

                <v-alert
                  v-if="step3Loading"
                  type="info"
                  variant="tonal"
                  class="mb-4"
                >
                  <template #title>Processing Document</template>
                  Please wait while we extract data from your document...
                </v-alert>

                <!-- OCR Results Data Table -->
                <v-card
                  v-if="ocrResults.length > 0"
                  variant="outlined"
                  class="mt-4"
                >
                  <v-card-title class="d-flex align-center justify-space-between">
                    <span>
                      <v-icon class="mr-2">mdi-table</v-icon>
                      OCR Results
                    </span>
                    <div>
                      <v-btn
                        icon="mdi-download"
                        size="small"
                        @click="exportResults('json')"
                        title="Export as JSON"
                      ></v-btn>
                      <v-btn
                        icon="mdi-file-delimited"
                        size="small"
                        @click="exportResults('csv')"
                        title="Export as CSV"
                        class="ml-1"
                      ></v-btn>
                    </div>
                  </v-card-title>

                  <v-card-text>
                    <v-data-table
                      :headers="ocrTableHeaders"
                      :items="ocrResults"
                      item-key="id"
                      class="elevation-1"
                      :items-per-page="5"
                    >
                      <template v-slot:item.timestamp="{ item }">
                        {{ formatDate(item.timestamp) }}
                      </template>

                      <template v-slot:item.confidence="{ item }">
                        <v-chip
                          :color="getConfidenceColor(item.confidence)"
                          size="small"
                        >
                          {{ item.confidence }}%
                        </v-chip>
                      </template>

                      <template v-slot:item.processingTime="{ item }">
                        {{ item.processingTime }}ms
                      </template>

                      <template v-slot:item.actions="{ item }">
                        <v-btn
                          icon="mdi-eye"
                          size="small"
                          @click="viewOcrDetails(item)"
                          title="View Details"
                        ></v-btn>
                        <v-btn
                          icon="mdi-delete"
                          size="small"
                          color="error"
                          @click="removeOcrResult(item.id)"
                          title="Remove"
                          class="ml-1"
                        ></v-btn>
                      </template>
                    </v-data-table>
                  </v-card-text>
                </v-card>
              </v-card-text>
            </v-card>
          </template>
        </v-stepper>
      </v-card-text>

      <v-card-actions class="px-6 pb-6">
        <v-spacer></v-spacer>

        <v-btn
          color="grey"
          variant="outlined"
          @click="handleCancel"
          :disabled="isAnyStepLoading"
        >
          Cancel
        </v-btn>

        <v-btn
          color="primary"
          variant="flat"
          @click="handleComplete"
          :disabled="!allStepsCompleted"
        >
          Complete
        </v-btn>
      </v-card-actions>
    </v-card>

    <!-- OCR Details Dialog -->
    <v-dialog v-model="showDetailsDialog" max-width="600px">
      <v-card v-if="selectedOcrDetail">
        <v-card-title>
          <v-icon class="mr-2">mdi-file-document</v-icon>
          OCR Result Details
        </v-card-title>
        <v-card-text>
          <v-expansion-panels>
            <v-expansion-panel>
              <v-expansion-panel-title>
                <v-icon class="mr-2">mdi-information</v-icon>
                Basic Information
              </v-expansion-panel-title>
              <v-expansion-panel-text>
                <div class="mb-2"><strong>Document Type:</strong> {{ selectedOcrDetail.documentType }}</div>
                <div class="mb-2"><strong>Confidence:</strong> {{ selectedOcrDetail.confidence }}%</div>
                <div class="mb-2"><strong>Processing Time:</strong> {{ selectedOcrDetail.processingTime }}ms</div>
                <div class="mb-2"><strong>Timestamp:</strong> {{ formatDate(selectedOcrDetail.timestamp) }}</div>
              </v-expansion-panel-text>
            </v-expansion-panel>

            <v-expansion-panel>
              <v-expansion-panel-title>
                <v-icon class="mr-2">mdi-code-json</v-icon>
                Extracted Data
              </v-expansion-panel-title>
              <v-expansion-panel-text>
                <pre class="text-body-2">{{ JSON.stringify(selectedOcrDetail.processedData, null, 2) }}</pre>
              </v-expansion-panel-text>
            </v-expansion-panel>
          </v-expansion-panels>
        </v-card-text>
        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn color="primary" @click="showDetailsDialog = false">Close</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-dialog>
</template>

<script setup lang="ts">
import { ref, computed, watch } from 'vue'
import { useOcrStore } from '@/stores/ocrStore'
import type { AuthRequest, EncodePasswordResponse } from '@/services/api'
import type { OcrResult } from '@/stores/ocrStore'
import ApiService from '@/services/api'

interface Props {
  modelValue: boolean
  imageBase64?: string
  documentType?: string
}

interface Emits {
  (e: 'update:modelValue', value: boolean): void
  (e: 'completed', results: OcrResult[]): void
  (e: 'cancelled'): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// OCR Store
const ocrStore = useOcrStore()

// Stepper
const currentStep = ref(1)
const stepperItems = [
  { title: 'Encode Password', value: 1 },
  { title: 'Login', value: 2 },
  { title: 'OCR Processing', value: 3 }
]

// Step 1: Encode Password
const step1Loading = ref(false)
const step1Completed = ref(false)
const step1Error = ref('')
const encodedData = ref<any>(null)

// Step 2: Login
const step2Loading = ref(false)
const step2Completed = ref(false)
const step2Error = ref('')
const authTokens = ref<any>(null)
const loginFormRef = ref()
const isLoginFormValid = ref(false)
const showPassword = ref(false)

const loginForm = ref<AuthRequest>({
  username: '',
  password: '',
  messagecode: '',
  clientUid: ''
})

// Step 3: OCR Processing
const step3Loading = ref(false)
const step3Completed = ref(false)
const step3Error = ref('')
const selectedOcrType = ref('')
const ocrResults = ref<OcrResult[]>([])

// OCR Details Dialog
const showDetailsDialog = ref(false)
const selectedOcrDetail = ref<OcrResult | null>(null)

// OCR Types
const ocrTypes = [
  { title: 'National ID Card', value: 'national_id' },
  { title: 'Passport', value: 'passport' },
  { title: 'Family Book', value: 'family_book' },
  { title: 'Driver License', value: 'driver_license' },
  { title: 'Birth Certificate', value: 'birth_certificate' }
]

// Data Table Headers
const ocrTableHeaders = [
  { title: 'ID', key: 'id', width: 100 },
  { title: 'Document Type', key: 'documentType' },
  { title: 'Confidence', key: 'confidence', width: 120 },
  { title: 'Processing Time', key: 'processingTime', width: 140 },
  { title: 'Timestamp', key: 'timestamp', width: 180 },
  { title: 'Actions', key: 'actions', sortable: false, width: 120 }
]

// Validation rules
const usernameRules = [
  (v: string) => !!v || 'Username is required',
  (v: string) => v.length >= 3 || 'Username must be at least 3 characters'
]

const passwordRules = [
  (v: string) => !!v || 'Password is required',
  (v: string) => v.length >= 6 || 'Password must be at least 6 characters'
]

// Computed
const isAnyStepLoading = computed(() =>
  step1Loading.value || step2Loading.value || step3Loading.value
)

const allStepsCompleted = computed(() =>
  step1Completed.value && step2Completed.value && step3Completed.value
)

const imageBase64 = computed(() => props.imageBase64)

// Methods
const updateDialog = (value: boolean) => {
  emit('update:modelValue', value)
}

// Step 1: Handle Encode Password
const handleEncodePassword = async () => {
  try {
    step1Loading.value = true
    step1Error.value = ''

    const response: EncodePasswordResponse = await ApiService.encodePassword()

    if (response.code === 200) {
      encodedData.value = response.data
      step1Completed.value = true
      currentStep.value = 2
    } else {
      throw new Error(response.message || 'Failed to encode password')
    }
  } catch (error: any) {
    step1Error.value = error.message || 'Failed to encode password'
  } finally {
    step1Loading.value = false
  }
}

// Step 2: Handle Login
const handleLogin = async () => {
  if (!isLoginFormValid.value || !encodedData.value) return

  try {
    step2Loading.value = true
    step2Error.value = ''

    const loginRequest: AuthRequest = {
      ...loginForm.value,
      password: encodedData.value.password // Use encoded password
    }

    const response = await ApiService.login(loginRequest)

    if (response.code === 200) {
      authTokens.value = response.data
      ApiService.setAuthToken(response.data.accessToken)
      step2Completed.value = true
      currentStep.value = 3

      // Set default OCR type if provided
      if (props.documentType) {
        selectedOcrType.value = props.documentType
      }
    } else {
      throw new Error(response.message || 'Login failed')
    }
  } catch (error: any) {
    step2Error.value = error.message || 'Login failed'
  } finally {
    step2Loading.value = false
  }
}

// Step 3: Handle OCR Processing
const handleOcrProcess = async () => {
  if (!selectedOcrType.value || !imageBase64.value) return

  try {
    step3Loading.value = true
    step3Error.value = ''

    const result = await ocrStore.processDocument(imageBase64.value, selectedOcrType.value)
    ocrResults.value.push(result)
    step3Completed.value = true

  } catch (error: any) {
    step3Error.value = error.message || 'OCR processing failed'
  } finally {
    step3Loading.value = false
  }
}

// Utility methods
const formatDate = (timestamp: string) => {
  return new Date(timestamp).toLocaleString()
}

const getConfidenceColor = (confidence: number) => {
  if (confidence >= 90) return 'success'
  if (confidence >= 70) return 'warning'
  return 'error'
}

const viewOcrDetails = (item: OcrResult) => {
  selectedOcrDetail.value = item
  showDetailsDialog.value = true
}

const removeOcrResult = (id: string) => {
  const index = ocrResults.value.findIndex(result => result.id === id)
  if (index > -1) {
    ocrResults.value.splice(index, 1)
  }
}

const exportResults = (format: 'json' | 'csv') => {
  let content = ''
  let filename = ''
  let mimeType = ''

  if (format === 'json') {
    content = JSON.stringify(ocrResults.value, null, 2)
    filename = `ocr-results-${Date.now()}.json`
    mimeType = 'application/json'
  } else {
    const headers = ['ID', 'Document Type', 'Confidence', 'Processing Time', 'Timestamp']
    const rows = ocrResults.value.map(result => [
      result.id,
      result.documentType,
      result.confidence,
      result.processingTime,
      result.timestamp
    ])
    content = [headers, ...rows].map(row => row.join(',')).join('\n')
    filename = `ocr-results-${Date.now()}.csv`
    mimeType = 'text/csv'
  }

  const blob = new Blob([content], { type: mimeType })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

const handleCancel = () => {
  resetForm()
  emit('cancelled')
  updateDialog(false)
}

const handleComplete = () => {
  emit('completed', ocrResults.value)
  updateDialog(false)
}

const resetForm = () => {
  currentStep.value = 1

  // Reset Step 1
  step1Loading.value = false
  step1Completed.value = false
  step1Error.value = ''
  encodedData.value = null

  // Reset Step 2
  step2Loading.value = false
  step2Completed.value = false
  step2Error.value = ''
  authTokens.value = null
  loginForm.value = {
    username: '',
    password: '',
    messagecode: '',
    clientUid: ''
  }
  showPassword.value = false

  // Reset Step 3
  step3Loading.value = false
  step3Completed.value = false
  step3Error.value = ''
  selectedOcrType.value = ''
  ocrResults.value = []

  // Clear tokens
  ApiService.clearAuthToken()
}

// Watch for dialog open/close
watch(() => props.modelValue, (newValue) => {
  if (newValue) {
    resetForm()
    // Set default OCR type if provided
    if (props.documentType) {
      selectedOcrType.value = props.documentType
    }
  }
})
</script>

<style scoped>
.v-card-title {
  background: linear-gradient(45deg, #1976D2, #42A5F5);
  color: white;
}

.font-monospace {
  font-family: 'Courier New', monospace;
}

.v-stepper {
  box-shadow: none;
}

pre {
  background: #f5f5f5;
  padding: 16px;
  border-radius: 4px;
  overflow-x: auto;
  max-height: 300px;
}
</style>
