import axios, {type AxiosInstance, type AxiosRequestConfig, type AxiosResponse} from 'axios'
import type {App} from 'vue'

const axiosInstance: AxiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// Request interceptor
axiosInstance.interceptors.request.use((config:AxiosRequestConfig) =>{
  const token =localStorage.getItem("token");
  const refreshToken = localStorage.getItem("refreshToken");
  if(token && config.headers)  config.headers.Authorization = `Bearer ${token}`;

  if(import.meta.env.DEV){
    console.log('üöÄ Request:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      data: config.data
    })
  }
  return config;
}, (error) => {
  return Promise.reject(error);
});


// Response interceptor
axiosInstance.interceptors.response.use(
  (response: AxiosResponse) => {
    // Log response in development
    if (import.meta.env.DEV) {
      console.log('‚úÖ Response:', {
        status: response.status,
        url: response.config.url,
        data: response.data
      })
    }

    return response
  },
  (error) => {
    // Handle common errors
    if (error.response) {
      const { status, data } = error.response

      switch (status) {
        case 401:
          // Unauthorized - redirect to login
          localStorage.removeItem('auth_token')
          // You can add router redirect here if needed
          break
        case 403:
          console.error('‚ùå Forbidden: Insufficient permissions')
          break
        case 404:
          console.error('‚ùå Not Found: Resource not found')
          break
        case 500:
          console.error('‚ùå Server Error: Internal server error')
          break
        default:
          console.error(`‚ùå Error ${status}:`, data?.message || error.message)
      }
    } else if (error.request) {
      console.error('‚ùå Network Error: No response received')
    } else {
      console.error('‚ùå Request Setup Error:', error.message)
    }

    return Promise.reject(error)
  }
)
